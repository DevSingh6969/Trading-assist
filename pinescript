//@version=5
strategy("Test - %", overlay = true)

i_startDate= input.time(timestamp("2023-04-29 00:00:00"), "Start Date" , group = "Backtest Range")
i_endDate= input.time(timestamp("2023-08-01 00:00:00"), "End Date" , group = "Backtest Range")
i_filterDirection = input.bool(true, "Filter trade direction", group = "Strategy")
i_filterHighLow = input.bool(true, "Filter high/low", group = "Strategy")
i_colorBars = input.bool(true, "Color bars with trade direction", group = "Strategy")

inTradeWindow = time >= i_startDate and time <= i_endDate ? true : false 
//-----------------------------------------
//               INPUTS
//-----------------------------------------



//-----------------------------------------
//              FUNCTIONS
//-----------------------------------------
BodyRange() =>
	math.abs(close - open)*0.05

f_isBodyMatch() =>
    // set the allowable range for the open and close based on the tolerance
    openHigh = open[2] + BodyRange()
    openLow = open[2] -  BodyRange()
    closeHigh = close[2] + BodyRange()
    closeLow = close[2] - BodyRange()
    // Test if the open of the previous bar are within the tolarance for 2 bars back
    isOpenMatch = close[1] <= openHigh and close[1] >= openLow
    isCloseMatch = open[1] <= closeHigh and open[1] >= closeLow
    // Return true if both the open and close are matching
    isOpenMatch and isCloseMatch

_rsi = ta.rsi(close, 14)

//-----------------------------------------
//              EXECUTION
//-----------------------------------------

i_maxLength = 10
var float[] _buy_array = array.new_float(i_maxLength, na)
var float[] _sell_array = array.new_float(i_maxLength, na)

// if we have a match, then we can draw the lines
if f_isBodyMatch() and inTradeWindow 

    if close[1] > open[1]
        array.unshift(_buy_array, close[1])
        array.unshift(_sell_array, open[1])

    if close[1] < open[1]
        array.unshift(_buy_array, open[1])
        array.unshift(_sell_array, close[1])

    l1 = line.new(time[1], open[1], time, open[1], xloc.bar_time, extend.right, color.green)
    l2 = line.new(time[1], close[1], time, close[1], xloc.bar_time, extend.right, color.red)

buySignal = false
for i = 0 to array.size(_buy_array) - 1
    if close[1] <= array.get(_buy_array, i) and close > array.get(_buy_array, i) and _rsi < 100 and (not i_filterHighLow or low > low[1])
        buySignal := true

sellSignal = false
for i = 0 to array.size(_sell_array) - 1
    if close[1] >= array.get(_sell_array, i) and close < array.get(_sell_array, i) and _rsi > 0 and (not i_filterHighLow or high < high[1])
        sellSignal := true

direction = 0
direction := buySignal ? 1 : sellSignal ? -1 : direction[1]

stratBuy = (not i_filterDirection and buySignal) or (i_filterDirection and ta.crossover(direction, 0))
stratSell = (not i_filterDirection and sellSignal) or (i_filterDirection and ta.crossunder(direction, 0))

plotshape(stratBuy, title="Buy Signal", text="Buy", style=shape.labelup, location=location.belowbar, color=color.green, textcolor=color.black, size=size.normal)
plotshape(stratSell, title="Sell Signal", text="Sell", style=shape.labeldown, location=location.abovebar, color=color.red, textcolor=color.white, size=size.normal)

barcolor(i_colorBars ? direction == 1 ? color.white : direction == -1 ? color.blue : color.gray : na)
